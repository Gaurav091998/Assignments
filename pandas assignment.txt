
Q1. How do you load a CSV file into a Pandas DataFrame?

Ans: by the help of "pd.read_csv(filepath)".
Q2. How do you check the data type of a column in a Pandas DataFrame?

Ans: by the syntex of df = pd.read_csv(filepath) df.info() will return all columns name and data type respectively.
Q3. How do you select rows from a Pandas DataFrame based on a condition?

Ans: by using head() inbuilt function ex: df[["salary" > 100000]].loc[1:23] only return rows starting from 1 to 22.
Q4. How do you rename columns in a Pandas DataFrame?

Ans: df. rename(columns = {'old_col1':'new_col1', 'old_col2':'new_col2'}, inplace = True)
Q5. How do you drop columns in a Pandas DataFrame?

Ans: df.drop(["col1","col2","col3",...],inplace=True)
Q6. How do you find the unique values in a column of a Pandas DataFrame?

Ans: df.col_name.unique() method return unique value of given column.
Q7. How do you find the number of missing values in each column of a Pandas DataFrame?

Ans: df.isnull().sum() return all missing values in each column of a pandas dataframe.
Q8. How do you fill missing values in a Pandas DataFrame with a specific value?

Ans: df.fillna(value,inplace=True)
Q9. How do you concatenate two Pandas DataFrames?

Ans: df3 = pd.concat([df1,df2])
Q10. How do you merge two Pandas DataFrames on a specific column?

Ans: DataFrame.merge(right, how=’inner’, on=None)
Q11. How do you group data in a Pandas DataFrame by a specific column and apply an aggregation function?

Ans: df.groupby(col_name).sum()

# Q12. How do you pivot a Pandas DataFrame?
# Ans:

import pandas as pd
data ={
    "name":["aman","akash","himanshu"],
    "age":[22,22,22],
    "graduation":["btech","btech","bsc"]
}

df = pd.DataFrame(data)
df.head()

	name 	age 	graduation
0 	aman 	22 	btech
1 	akash 	22 	btech
2 	himanshu 	22 	bsc

df.pivot("name","age","graduation")

age 	22
name 	
akash 	btech
aman 	btech
himanshu 	bsc
Q13. How do you change the data type of a column in a Pandas DataFrame?

Ans: there are two methods i.e df[col_name] = df.col_name.apply(lambda x : int(x)) and df.astype(int) or df.col_name.astype(str)
Q14. How do you sort a Pandas DataFrame by a specific column?

Ans: df.sort_values(by=[col_name])
Q15. How do you create a copy of a Pandas DataFrame?

Ans: df = pd.DataFrame(data) new_df = df.copy()
Q16. How do you filter rows of a Pandas DataFrame by multiple conditions?

Ans: df[["col1" > 2000 and "col2" > 400 ]].loc[2:4]
Q17. How do you calculate the mean of a column in a Pandas DataFrame?

Ans: df.col_name.mean() or df.describe() return all the statistic value of all the columns.
Q18. How do you calculate the standard deviation of a column in a Pandas DataFrame?

Ans: df.col_name.std()
Q19. How do you calculate the correlation between two columns in a Pandas DataFrame?

Ans: df.groupby([col1,col2]) and use other aggregate methods on it.
Q20. How do you select specific columns in a DataFrame using their labels?

Ans: import pandas as pd data ={ "name":["aman","akash","himanshu"], "age":[22,22,22], "graduation":["btech","btech","bsc"] }

df = pd.DataFrame(data) df.head()

new_df = df["name","graduation"] will return a dataframe having columns name and graduation of df dataframe.
Q21. How do you select specific rows in a DataFrame using their indexes?

Ans:

import pandas as pd
data ={
    "name":["aman","akash","himanshu"],
    "age":[22,22,22],
    "graduation":["btech","btech","bsc"]
}

df = pd.DataFrame(data)
df.head()

	name 	age 	graduation
0 	aman 	22 	btech
1 	akash 	22 	btech
2 	himanshu 	22 	bsc

df[1:2]

	name 	age 	graduation
1 	akash 	22 	btech
Q22. How do you sort a DataFrame by a specific column?

Ans: df.col_name.sort() or df.sort_values(by = ["col_name"])
Q23. How do you create a new column in a DataFrame based on the values of another column?

Ans: df.new_col_name = df.old_col_name.apply(lambda var: cond...)
Q24. How do you remove duplicates from a DataFrame?

Ans: DataFrame.drop_duplicates(subset=None, keep=’first’, inplace=False)
Q25. What is the difference between .loc and .iloc in Pandas?

Ana: The main difference between pandas loc[] vs iloc[] is loc gets DataFrame rows & columns by labels/names and iloc[] gets by integer Index/position.
